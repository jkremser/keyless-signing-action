name: Retag Push Sign
on:
  workflow_dispatch:
    inputs:
      image:
        description: Fully qualified container image, including container registry and tag
        required: true
        default: "docker.io/giantswarm/csi-attacher:v3.5.0"
      digest:
        description: "sha256:abcd.. of the image we would like to sign. If not provided the image provided as image param will be pulled and the digest will be read from it, but this way we have no guarantee, that 
          attacker didn't tamper with the image during the transmission (docker images --digests)"
        required: false
        default: "sha256:9ad87b69527daeb4f8c52aeee012812cd05241e1ec8bbb8e5b1e237ce57b6895"

env:
  NEW_REGISTRY: docker.io
  NEW_ORG: jkremser


jobs:
  sign:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      id-token: write

    steps:
      - uses: actions/checkout@v1

      - name: Login to GitHub
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker.io
        uses: docker/login-action@v2.1.0
        with:
          registry: docker.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: get_digest
        run: |
          docker pull ${{ github.event.inputs.image }}
          CONTAINER_DIGEST="$(docker inspect ${{ github.event.inputs.image }} --format '{{ index .RepoDigests 0 }}' | cut -d '@' -f 2)"
          # if digest was provided, check if it matches
          if [[ -z "${{ github.event.inputs.digest }}" ]] && [[ "${{ github.event.inputs.digest }}x" != "${CONTAINER_DIGEST}x" ]]; then
            echo "provided digest of container image doesn't match with the calculated one!"
            exit 1
          fi
          echo "CONTAINER_DIGEST=${CONTAINER_DIGEST}" >> $GITHUB_ENV

      - name: retag+push
        run: |
          NEW_IMG="${NEW_REGISTRY}/${NEW_ORG}/$(echo ${{ github.event.inputs.image }} | cut -d/ -f3-)"
          docker tag ${{ github.event.inputs.image }} ${NEW_IMG}
          docker push ${NEW_IMG}
          echo "NEW_IMG=${NEW_IMG}" >> $GITHUB_ENV


      - uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.13.1'

      - name: Sign the images
        run: |
          NEW_IMG_WITH_DIGEST="${NEW_REGISTRY}/${NEW_ORG}/$(echo ${{ github.event.inputs.image }} | cut -d/ -f3- | cut -d: -f1)@${CONTAINER_DIGEST}"
          _output=$(cosign sign --force ${NEW_IMG_WITH_DIGEST} 2>&1)
          echo ${_output}
          LOG_INDEX=$(echo $_output | grep "created with index:" | cut -d: -f2 | awk '{$1=$1};1')
          echo "LOG_INDEX=${LOG_INDEX}"
          echo "NEW_IMG_WITH_DIGEST=${NEW_IMG_WITH_DIGEST}" >> $GITHUB_ENV
          echo "LOG_INDEX=${LOG_INDEX}" >> $GITHUB_ENV
        env:
          COSIGN_EXPERIMENTAL: 1

      - name: Verify the pushed tag
        run: |
          {
            echo '```bash'
            echo "cosign verify ${NEW_IMG} | jq ."
          } >> "$GITHUB_STEP_SUMMARY"
          set -o pipefail
          cosign verify ${NEW_IMG} | jq . | tee -a ${GITHUB_STEP_SUMMARY}
          set +o pipefail
          {
            echo '```'
            echo "Record in Rekor transparency log: https://search.sigstore.dev/?logIndex=${LOG_INDEX}."
          } >> "$GITHUB_STEP_SUMMARY"

        env:
          COSIGN_EXPERIMENTAL: 1
